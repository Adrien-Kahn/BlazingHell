# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ray_client_pb2 as src_dot_ray_dot_protobuf_dot_ray__client__pb2


class RayletDriverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/GetObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetResponse.FromString,
        )
    self.PutObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/PutObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutResponse.FromString,
        )
    self.WaitObject = channel.unary_unary(
        '/ray.rpc.RayletDriver/WaitObject',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitResponse.FromString,
        )
    self.Schedule = channel.unary_unary(
        '/ray.rpc.RayletDriver/Schedule',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTask.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTaskTicket.FromString,
        )
    self.Terminate = channel.unary_unary(
        '/ray.rpc.RayletDriver/Terminate',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.TerminateRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.TerminateResponse.FromString,
        )
    self.ClusterInfo = channel.unary_unary(
        '/ray.rpc.RayletDriver/ClusterInfo',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClusterInfoRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClusterInfoResponse.FromString,
        )
    self.KVGet = channel.unary_unary(
        '/ray.rpc.RayletDriver/KVGet',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVGetRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVGetResponse.FromString,
        )
    self.KVPut = channel.unary_unary(
        '/ray.rpc.RayletDriver/KVPut',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVPutRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVPutResponse.FromString,
        )
    self.KVDel = channel.unary_unary(
        '/ray.rpc.RayletDriver/KVDel',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVDelRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVDelResponse.FromString,
        )
    self.KVList = channel.unary_unary(
        '/ray.rpc.RayletDriver/KVList',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVListRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVListResponse.FromString,
        )


class RayletDriverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PutObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WaitObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Schedule(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Terminate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClusterInfo(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KVGet(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KVPut(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KVDel(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def KVList(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RayletDriverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetObject': grpc.unary_unary_rpc_method_handler(
          servicer.GetObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.GetResponse.SerializeToString,
      ),
      'PutObject': grpc.unary_unary_rpc_method_handler(
          servicer.PutObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.PutResponse.SerializeToString,
      ),
      'WaitObject': grpc.unary_unary_rpc_method_handler(
          servicer.WaitObject,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.WaitResponse.SerializeToString,
      ),
      'Schedule': grpc.unary_unary_rpc_method_handler(
          servicer.Schedule,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTask.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClientTaskTicket.SerializeToString,
      ),
      'Terminate': grpc.unary_unary_rpc_method_handler(
          servicer.Terminate,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.TerminateRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.TerminateResponse.SerializeToString,
      ),
      'ClusterInfo': grpc.unary_unary_rpc_method_handler(
          servicer.ClusterInfo,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClusterInfoRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.ClusterInfoResponse.SerializeToString,
      ),
      'KVGet': grpc.unary_unary_rpc_method_handler(
          servicer.KVGet,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVGetRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVGetResponse.SerializeToString,
      ),
      'KVPut': grpc.unary_unary_rpc_method_handler(
          servicer.KVPut,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVPutRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVPutResponse.SerializeToString,
      ),
      'KVDel': grpc.unary_unary_rpc_method_handler(
          servicer.KVDel,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVDelRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVDelResponse.SerializeToString,
      ),
      'KVList': grpc.unary_unary_rpc_method_handler(
          servicer.KVList,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVListRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.KVListResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ray.rpc.RayletDriver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RayletDataStreamerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Datapath = channel.stream_stream(
        '/ray.rpc.RayletDataStreamer/Datapath',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.DataRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.DataResponse.FromString,
        )


class RayletDataStreamerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Datapath(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RayletDataStreamerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Datapath': grpc.stream_stream_rpc_method_handler(
          servicer.Datapath,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.DataRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.DataResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ray.rpc.RayletDataStreamer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class RayletLogStreamerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Logstream = channel.stream_stream(
        '/ray.rpc.RayletLogStreamer/Logstream',
        request_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.LogSettingsRequest.SerializeToString,
        response_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.LogData.FromString,
        )


class RayletLogStreamerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Logstream(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RayletLogStreamerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Logstream': grpc.stream_stream_rpc_method_handler(
          servicer.Logstream,
          request_deserializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.LogSettingsRequest.FromString,
          response_serializer=src_dot_ray_dot_protobuf_dot_ray__client__pb2.LogData.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ray.rpc.RayletLogStreamer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
